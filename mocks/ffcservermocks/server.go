// Code generated by mockery v1.0.0. DO NOT EDIT.

package ffcservermocks

import (
	context "context"

	config "github.com/hyperledger/firefly-common/pkg/config"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// Init provides a mock function with given fields: ctx, conf, corsConf
func (_m *Server) Init(ctx context.Context, conf config.Section, corsConf config.Section) error {
	ret := _m.Called(ctx, conf, corsConf)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Section, config.Section) error); ok {
		r0 = rf(ctx, conf, corsConf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestStop provides a mock function with given fields:
func (_m *Server) RequestStop() {
	_m.Called()
}

// Start provides a mock function with given fields:
func (_m *Server) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitStopped provides a mock function with given fields:
func (_m *Server) WaitStopped() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
